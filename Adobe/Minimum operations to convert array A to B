import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");
            
            int N = Integer.parseInt(S[0]);
            int M = Integer.parseInt(S[1]);
            
            int[] A = new int[N];
            int[] B = new int[M];
            
            String S1[] = read.readLine().split(" ");
            String S2[] = read.readLine().split(" ");
            
            for(int i=0; i<N; i++)
                A[i] = Integer.parseInt(S1[i]);
                
            for(int i=0; i<M; i++)
                B[i] = Integer.parseInt(S2[i]);

            Solution ob = new Solution();
            System.out.println(ob.minInsAndDel(A,B,N,M));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution {
    static int minInsAndDel(int[] a, int[] b, int n, int m) {
        int[][] dp = new int[n+1][m+1];
        for (int i = 0; i <= n; i++){
            dp[i][0] = 0;
        }
        for (int i = 0; i <= m; i++){
            dp[0][i] = 0;
        }
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= m; j++){
                if (a[i-1] == b[j-1]){
                    dp[i][j] = dp[i-1][j-1]+1;
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        int ans = (n-dp[n][m])+(m-dp[n][m]);
        return ans;
    }
};
