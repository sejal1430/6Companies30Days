//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-->0){
            String s1[] = in.readLine().trim().split("\\s+");
            int mat[][] = new int[9][9];
            for(int i = 0;i < 81;i++)
                mat[i/9][i%9] = Integer.parseInt(s1[i]);
            
            Solution ob = new Solution();
            System.out.println(ob.isValid(mat));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution{
    static int isValid(int mat[][]){
        int n = 9;
        for (int i = 0; i < n; i++){
            Set<Integer> set = new HashSet<>();
            //row-wise validation
            for (int j = 0; j < n; j++){
                if (mat[i][j] == 0) continue;
                if (mat[i][j] < 1 || mat[i][j] > 9) return 0;
                if (mat[i][j] != 0 && set.contains(mat[i][j])) return 0;
                set.add(mat[i][j]);
            }
            set.clear();
            //column-wise validation
            for (int j = 0; j < n; j++){
                if (mat[j][i] == 0) continue;
                if (mat[j][i] < 1 || mat[j][i] > 9) return 0;
                if (mat[j][i] != 0 && set.contains(mat[j][i])) return 0;
                set.add(mat[j][i]);
            }
        }
        //block-wise validation
        for (int i = 0; i < n-2; i+=3){
            for (int j = 0; j < n-2; j+=3){
                Set<Integer> set = new HashSet<>();
                for (int k = 0; k < 3; k++){
                    for (int l = 0; l < 3; l++){
                        int x = i+k;
                        int y = j+l;
                        if (mat[x][y] == 0) continue;
                        if (set.contains(mat[x][y])) return 0;
                        set.add(mat[x][y]);
                    }
                }
            }
        }
        return 1;
    }
}
