class Solution {
    int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int ans = 0;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (grid[i][j] == 2) q.offer(new int[]{i,j});
            }
        }
        while (!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int[] cur = q.poll();
                // Find its unrotten neighbors
                for(int[] d: dir) {
                    int x = cur[0] + d[0], y = cur[1] + d[1];
                    if(0 <= x && 0 <= y && x < m && y < n && grid[x][y] == 1) {
                        grid[x][y] = 2; 
                        q.add(new int[]{ x, y });
                    }
                }
            }
            if(!q.isEmpty()) ans++;
        }
        boolean flag = true;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return ans;
    }
}
