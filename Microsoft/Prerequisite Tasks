
import java.io.*;
import java.util.*;

class GFG {
	public static void main(String args[]) throws IOException
	{
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
		while(t>0)
		{
		    int N = sc.nextInt();
		    int P = sc.nextInt();
		    int prerequisites[][] = new int[P][2];
		    for(int i=0;i<P;i++)
		    {
		        for(int j=0;j<2;j++)
		        {
		            prerequisites[i][j] = sc.nextInt();
		        }
		    }
			Solution ob = new Solution();
			if(ob.isPossible(N,prerequisites))
			{
			    System.out.println("Yes");
			}
			else{
			    System.out.println("No");
			}
			t--;
		}
	}
	
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    public boolean isPossible(int n, int[][] prerequisites)
    {
        Queue<Integer> q = new LinkedList<>();
        int[] indegree = new int[n];
        for (int i = 0; i < prerequisites.length; i++){
            indegree[prerequisites[i][0]]++;
        }
        for (int i = 0; i < n; i++){
            if (indegree[i] == 0){
                q.offer(i);
            }
        }
        int cnt = 0;
        while (!q.isEmpty()){
            int course = q.poll();
            cnt++;
            for (int i = 0; i < prerequisites.length; i++){
                if (prerequisites[i][1] == course){
                    indegree[prerequisites[i][0]]--;
                    if (indegree[prerequisites[i][0]] == 0){
                        q.offer(prerequisites[i][0]);
                    }
                }
            }
        }
        return (cnt == n);
    }
    
}
