import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] grid = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.findMaxArea(grid);
            System.out.println(ans);
        }
    }
}// } Driver Code Ends


class Solution
{
    int cnt = 0;
    int[][] dir = {{0,1}, {1,0}, {0,-1}, {-1,0}, {1,1}, {-1,-1}, {1,-1}, {-1,1}};
    //Function to find unit area of the largest region of 1s.
    public int findMaxArea(int[][] grid)
    {
        int n = grid.length, m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++){
                if (grid[i][j] == 1 && !visited[i][j]){
                    cnt = 0;
                    dfs(i,j,grid,visited, n, m);
                    ans = Math.max(ans, cnt);
                }
            }
        }
        return ans;
    }
    
    public void dfs(int i, int j, int[][] grid, boolean[][] visited, int n, int m){
        visited[i][j] = true;
        cnt += 1;
        for (int[] d: dir){
            int x = i+d[0];
            int y = j+d[1];
            if (x >= 0 && x < n && y >= 0 && y < m && !visited[x][y] && grid[x][y] == 1){
                dfs(x,y,grid,visited,n,m);
            }
        }
    }
}
